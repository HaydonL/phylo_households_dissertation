min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
grid_theme <- function(){
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
grid_theme <- function(){
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
pairs_tsi <- read.csv(here::here("data", "pairs_tsi_clean.csv"))
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
str(pairs_tsi)
summary(pairs_tsi)
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
source(here::here("helper-functions", "grid_theme.R"))
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
theme(axis.title = element_blank()) + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered_SG.rds"))
fit$print(max_rows = 1000)
fit$diagnostic_summary()
fit <- readRDS(here::here("data", "logit_pairs_draws_1-2_SG.rds"))
fit$print(max_rows = 1000)
fit$diagnostic_summary()
# This file processes the output of the stan fits and then prints and saves
# desired plots used in the thesis as pdfs.
library(data.table)
library(ggplot2)
library(gridExtra)
library(Hmisc, include.only = "binconf")
source(here::here("helper-functions", "plot_normal.R"))
source(here::here("helper-functions", "plot_final_mixtures.R"))
source(here::here("helper-functions", "grid_theme.R"))
source(here::here("helper-functions", "sample_intensity.R"))
source(here::here("helper-functions", "pretty_scale.R"))
ages <- seq(15 + 1e-5, 50 - 1e-5, length.out = 300)
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
# Calculate final mixture densities for each group
mixtures <- lapply(1:4, plot_normal, fit = fit_norm, chain_no = 2,
draw_no = 1894, ages = ages, K = 5, min_age = 15,
max_age = 50, plot = FALSE)
mixtures
saveRDS(mixtures, "mixtures.rds")
source(here::here("helper-functions", "dbeta_bivariate.R"))
library(ggplot2)
library(gridExtra)
grid_theme <- function(){
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(2, 2), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
# Read in data
pairs_tsi <- read.csv(here::here("data", "pairs_tsi_clean.csv"))
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
pairs_tsi
# Read in data
pairs_tsi <- read.csv(here::here("data", "pairs_tsi_clean.csv"))
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
# Make scatter plot of pairs data
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data,
aes(x = AGE_TRANSMISSION.SOURCE, y = AGE_INFECTION.RECIPIENT)) +
geom_point() +
geom_density_2d() +
grid_theme() + labs(caption = captions[group_no]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data,
aes(x = AGE_TRANSMISSION.SOURCE, y = AGE_INFECTION.RECIPIENT)) +
geom_point() +
geom_density_2d() +
labs(caption = captions[group_no]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
# Read in data
pairs_tsi <- read.csv(here::here("data", "pairs_tsi_clean.csv"))
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
# Make scatter plot of pairs data
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data,
aes(x = AGE_TRANSMISSION.SOURCE, y = AGE_INFECTION.RECIPIENT)) +
geom_point() +
geom_density_2d() +
labs(caption = captions[group_no]) +
xlab("Age of source") +
ylab("Age of recipient") +
theme(panel.background = element_blank())
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
grob <- do.call(arrangeGrob, plots)
# Make scatter plot of pairs data
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data,
aes(x = AGE_TRANSMISSION.SOURCE, y = AGE_INFECTION.RECIPIENT)) +
geom_point() +
geom_density_2d() +
labs(caption = captions[group_no]) +
xlab("Age of source") +
ylab("Age of recipient") +
theme(panel.background = element_blank()) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data,
aes(x = AGE_TRANSMISSION.SOURCE, y = AGE_INFECTION.RECIPIENT)) +
geom_point() +
geom_density_2d() +
labs(caption = captions[group_no]) +
xlab("Age of source") +
ylab("Age of recipient") +
theme(panel.background = element_blank(),
axis.line = element_line()) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
# Plot data from sim_1 draws
sim_1 <- read.csv(here::here("data", "simulated", "sim_1.csv"))
setDT(sim_1)
plots <- list()
for (group_no in 1:4){
group_data <- sim_1[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = x, y = y)) +
geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = paste("Group:", group_no)) +
theme(panel.background = element_blank(),
axis.line = element_line()) +
xlim(0, 1) + ylim(0, 1)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("sim_1_scatter.pdf", final_plot, height = 7.2)
# Plot data from sim_1 draws
sim_1 <- read.csv(here::here("data", "simulated", "sim_1.csv"))
setDT(sim_1)
plots <- list()
for (group_no in 1:4){
group_data <- sim_1[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = x, y = y)) +
geom_density_2d(aes(x = x, y = y)) +
labs(caption = paste("Group:", group_no)) +
theme(panel.background = element_blank(),
axis.line = element_line()) +
xlim(0, 1) + ylim(0, 1)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("sim_1_scatter.pdf", final_plot, height = 7.2)
fit <- readRDS(here::here("data", "logit_sim_1_draws_ordered.rds"))
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit_norm$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Check proportion of HH vs OOH
eta_HH_prop <- rowSums(eta_prop[, c(2,4)])
summary(eta_HH_prop)
HH_quant_bayes <- quantile(eta_HH_prop, c(0.5, 0.025, 0.975)) # 95% CI
# Calculate frequentist CIs assuming binomial data
n_obs <- pairs_tsi[, .N]
n_HH <- pairs_tsi[same_hh == 1, .N]
HH_quant_freq <- binconf(n_HH, n_obs, alpha = 0.05) # 95% CI
plot_data <- data.frame(method = c("Bayesian", "Empirical"),
median = c(HH_quant_bayes[1], HH_quant_freq[1]),
lower = c(HH_quant_bayes[2], HH_quant_freq[2]),
upper = c(HH_quant_bayes[3], HH_quant_freq[3]))
p <- ggplot(plot_data) + geom_bar(aes(x = method, y = median, fill = method),
stat = "identity") +
geom_errorbar(aes(x = method, ymin = lower, ymax = upper),
width = 0.4, linewidth = 1.3) +
ylim(0, 0.5) + labs(y = "Proportion", x = NULL) +
theme(legend.position = "none")
ggsave("HH_prop.pdf", p, width = 4)
eta_prop_HH
eta_HH_prop
p2 <- ggplot(eta_HH_prop) + geom_histogram()
p2 <- ggplot(as.data.frame(eta_HH_prop)) + geom_histogram()
p2
as.data.frame(eta_HH_prop)
str(as.data.frame(eta_HH_prop))
p2 <- ggplot(as.data.frame(eta_HH_prop)) + geom_histogram(aes(x = eta_HH_prop))
p2
p2 <- ggplot(as.data.frame(eta_HH_prop)) +
geom_histogram(aes(x = eta_HH_prop)) +
xlab("Proportion of household infections") +
ylab("Frequency")
p2
p2 <- ggplot(as.data.frame(eta_HH_prop)) +
geom_histogram(aes(x = eta_HH_prop)) +
xlab("Proportion of household infections") +
ylab("Frequency") +
theme(panel.background = element_blank(),
axis.line = element_line())
p2
ggsave("HH_prop_hist.pdf", p, width = 4)
ggsave("HH_prop_hist.pdf", p2, width = 4)
# Load in pairs data with groups for this question
data_Q1_2 <- read.csv(here::here("data", "Q1_2_data.csv"))
data_Q1_2
data_Q1_2[group == 3, .N]
library(data.table)
setDT(data_Q1_2)
data_Q1_2[group == 3, .N]
data_Q1_2[group != 3, .N]
fit <- readRDS(here::here("data/logit_pairs_draws_1-2_SG_K4.rds"))
fit$diagnostic_summary()
fit$print(max_rows = 1000)
library(posterior)
mcmc_traceplot
mcmc_trace
library(bayesplot)
mcmc_trace(fit$draws("weight"))
mcmc_trace(fit$draws("weight"))
mcmc_trace(fit$draws("weights"))
mcmc_trace(fit$draws("lp__"))
