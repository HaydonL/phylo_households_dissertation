N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
library(mvtnorm)
?sample
set.seed(6341874)
mus <- rnorm(3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
groups <- sample(3, 200, replace = TRUE)
groups
library(mvtnorm)
mvtnorm
?mvtnorm
mus <- matrix(rnorm(6), nrow = 3)
mus[1]
mus[1,]
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
matrices[[1]]
rmvnorm
?rmvnorm
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(3, 200, replace = TRUE)
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
data
stan_data <- list(
N = 200,
K = 4,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
library(mvtnorm)
mvtcolor_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
color_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(3, 200, replace = TRUE)
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 4,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
View(mus)
fit$summary()
mcmc_trace(fit$draws(mus))
mcmc_trace(fit$draws("mus"))
mcmc_trace(fit$draws("ordered_mus"))
stan_data <- list(
N = 200,
K = 3,
ages = data
)
mcmc_trace(fit$draws("weights"))
stan_data <- list(
N = 200,
K = 3,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
?sample
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
library(mvtnorm)
color_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(3, 200, replace = TRUE, prob = c(0.6, 0.3, 0.1))
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 3,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
mcmc_trace(fit$draws("weights"))
mcmc_trace(fit$draws("ordered_mus"))
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
library(mvtnorm)
color_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(2, 200, replace = TRUE, prob = c(0.6, 0.4))
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 2,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
mcmc_trace(fit$draws("ordered_mus"))
?mcmc_pairs
model <- cmdstan_model(modelpath)
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(2, 200, replace = TRUE, prob = c(0.6, 0.4))
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 2,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP_ordered.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP_ordered.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 43821,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_pairs_draws.rds"))
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_pairs_draws.rds"))
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_sim_1_draws.rds"))
logit_sim_1_draws <- readRDS("C:/Users/haydo/OneDrive/Desktop/MSc Statistics/Summer Term/dissertation/data/logit_sim_1_draws.rds")
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
# Extract rates (eta)
eta_draws <- fit$draws(eta)
# Extract rates (eta)
eta_draws <- fit$draws("eta")
eta_draws
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_draws
str(eta_draws)
dim(eta_draws)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_draws[, 5] <- colSums(eta_draws)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- colSums(eta_draws)
eta_sums
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_sums
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
eta_prop
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
rowSums(eta_prop)
eta_prop
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
hist(eta_prop[, 1])
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
hist(eta_prop[, 1])
fit$data_file()
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_hist(eta_prop[, group])
print(p)
}
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_hist(eta_prop[, group])
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(eta_prop[, group])
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group]))
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group])) +
labs(title = paste("Histogram of proportions - group", group),
x = "Proportion", y = "Frequency",
caption = "For four chains with 5,000 iterations each")
print(p)
}
eta_prop
as.matrix(eta_prop)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group])) +
labs(title = paste("Histogram of proportions - group", group),
x = "Proportion", y = "Frequency",
caption = "For four chains with 5,000 iterations each")
print(p)
}
summary(eta_prop)
source(here::here("helper-functions", "plot_normal.R"))
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
#plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
draw_no
chain_no
plot_normal(fit, chain_no, draw_no, 1, "a")
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
