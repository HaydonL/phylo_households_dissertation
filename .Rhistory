N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 0,
max_age = 1
)
stan_data$group_nos
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 2000
)
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 2000
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
fit$save_object(here::here("data", "logit_pairs_draws.rds"))
str(fit)
class(fit)
source(here::here("helper-functions", "extract_data.R"))
?logit
??logit
K <- 5
group_no <- 1
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weight_names
mu_names <-  c(paste0("mus[", group_no, ",", k, ",1]"),
paste0("mus[", group_no, ",", k, ",2]"))
k <- 20
mu_names <-  c(paste0("mus[", group_no, ",", k, ",1]"),
paste0("mus[", group_no, ",", k, ",2]"))
mu_names
Sigma_ends <- c("1,1]", "1,2]", "2,1]", "2,2]")
Sigma_names <- c()
for (i in 1:4){
end <- Sigma_ends[i]
Sigma_names[i] <- paste0("Sigmas[", group_no, ",", k, ",", end)
}
Sigma_names
library(mvtnorm)
# Set up grid of plot points
x <- seq(0, 1, by = 0.01)
logit_x <- log(x / (1 - x))
x
logit_x
# Set up grid of plot points
x <- seq(0.01, 0.99, by = 0.01)
logit_x <- log(x / (1 - x))
logit_x
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weights <- as.numeric(params[weight_names])
for (k in 1:K){
x_grid <- expand.grid(x, x)
logit_grid <- expand.grid(logit_x, logit_x)
mu_names <-  c(paste0("mus[", group_no, ",", k, ",1]"),
paste0("mus[", group_no, ",", k, ",2]"))
Sigma_ends <- c("1,1]", "1,2]", "2,1]", "2,2]")
Sigma_names <- c()
for (i in 1:4){
end <- Sigma_ends[i]
Sigma_names[i] <- paste0("Sigmas[", group_no, ",", k, ",", end)
}
mus <- as.numeric(params[mu_names])
Sigmas <- as.numeric(params[Sigma_names])
Sigma <- matrix(Sigmas, nrow = 2, byrow = TRUE)
grid$density <- apply(logit_grid, 1, dmvnorm, mean = mus, sigma = Sigma)
density_list[[k]] <- grid$density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red")
plots[[k]] <- p
}
params <- extract_data(fit, chain_no, draw_no)
chain_no <- 1
draw_no <- 1
params <- extract_data(fit, chain_no, draw_no)
params
# Set up grid of plot points
x <- seq(0.01, 0.99, by = 0.01)
logit_x <- log(x / (1 - x))
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weights <- as.numeric(params[weight_names])
weights
x_grid <- expand.grid(x, x)
logit_grid <- expand.grid(logit_x, logit_x)
mu_names <-  c(paste0("mus[", group_no, ",", k, ",1]"),
paste0("mus[", group_no, ",", k, ",2]"))
Sigma_ends <- c("1,1]", "1,2]", "2,1]", "2,2]")
Sigma_names <- c()
for (i in 1:4){
end <- Sigma_ends[i]
Sigma_names[i] <- paste0("Sigmas[", group_no, ",", k, ",", end)
}
mus <- as.numeric(params[mu_names])
mus
Sigmas <- as.numeric(params[Sigma_names])
Sigmas
Sigma <- matrix(Sigmas, nrow = 2, byrow = TRUE)
Sigma
grid$density <- apply(logit_grid, 1, dmvnorm, mean = mus, sigma = Sigma)
x_grid$density <- apply(logit_grid, 1, dmvnorm, mean = mus, sigma = Sigma)
x_grid
x_grid$density <- rep(1, 99^2)
x_grid
x_grid$density <- x_grid$density / (x_grid$Var1 * (1 - x_grid$Var1) *
x_grid$Var2 * (1 - x_grid$Var2))
x_grid
a <- 0.01 * 0.99 * 0.01 * 0.99
1/a
# Set up grid of plot points
x <- seq(15, 35, by = 0.1)
x
# Set up grid of plot points
x <- seq(15.1, 34.9, by = 0.1)
x
s_x <- (x - 15)/35 # scaled ages
s_x
# Set up grid of plot points
x <- seq(15.1, 49.9, by = 0.1)
s_x <- (x - 15)/35 # scaled ages
s_x
l_x <- log(s_x / (1 - s_x)) # logit scaled ages
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weights <- as.numeric(params[weight_names])
source(here::here("helper-functions", "plot_normal.R"))
plot_normal(fit, 1, 1, 1, "a", 5)
source(here::here("helper-functions", "plot_normal.R"))
plot_normal(fit, 1, 1, 1, "a", 5)
source(here::here("helper-functions", "plot_normal.R"))
plot_normal(fit, 1, 1, 1, "a", 5)
source(here::here("helper-functions", "plot_normal.R"))
plot_normal(fit, 1, 1, 1, "a", 5)
grid_theme <- function(){
theme(axis.text = element_blank())
}
plot_normal(fit, 1, 1, 1, "a", 5)
source(here::here("helper-functions", "plot_normal.R"))
plot_normal(fit, 1, 1, 1, "a", 5)
ggsave("logit_data_gp1.pdf")
knitr::opts_chunk$set(echo = TRUE)
# Load in packages and data
library(ggplot2)
library(data.table)
library(plyr)
library(dplyr)
library(MASS)
library(RColorBrewer)
library(Hmisc)
library(ggpubr)
library(ks)
library(tidyverse)
load("Rakai_Pangea2_RCCS_pairs_household_202211XX.RData")
# Exploratory data analysis
# Load in packages and data
library(ggplot2)
library(data.table)
library(plyr)
library(dplyr)
library(MASS)
library(RColorBrewer)
library(Hmisc)
library(ggpubr)
library(ks)
library(tidyverse)
library(scales)
pairs_tsi <- read.csv(here::here("data", "pairs_tsi.csv"))
print(sort(unique(pairs_tsi$ROUND.M)))
str(pairs_tsi)
plot_contour <- function(sex, hh){
dataset <- pairs_tsi %>% filter(same_hh == hh) %>%
filter(SEX.SOURCE == sex) %>%
dplyr::select(AGE_TRANSMISSION.SOURCE, AGE_INFECTION.RECIPIENT)
if (sex == "M"){
direction <- "Male to female"
} else {
direction <- "Female to male"
}
if (hh){
end <- "within household"
} else {
end <- "out of household"
}
title <- paste(direction, end, sep = ", ")
kde(dataset) %>% plot(xlab="Age of source",
ylab = "Age of recipient",
main = title)
points(dataset, pch = 4, col = alpha("black", 0.3))
}
set.seed(1001)
pairs_tsi[group == 1]
pairs_tsi
fit
filename <- here::here("data", "pairs_tsi.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
pairs_tsi[group == 1]
pairs_tsi[group == 1][, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]]
pairs_group1 <- pairs_tsi[group == 1][, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]
pairs_group1
plot(pairs_group1)
?xlim
pairs_group1 <- pairs_tsi[group == 1][, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]
plot(pairs_group1)
xlim(c(15, 50))
ylim(c(15, 50))
plot(pairs_group1, xlim = c(15, 50))
pairs_group1 <- pairs_tsi[group == 1][, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]
plot(pairs_group1, xlim = c(15, 50), ylim = c(15, 50))
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
filename <- here::here("data", "pairs_tsi.csv")
filename <- here::here("data", "pairs_tsi.csv")
#modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP.stan")
modelpath <- here::here("stan-models", "beta_mixture_DP.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
1e-5
?seq
x_grid <- rep(1, 100)
x_grid$density <- rep(1, 100)
x_grid <- list()
x_grid$density <- rep(1, 100)
max_age <- 10
min_age <- 0
x_grid$density / (max_age - min_age)^2
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "beta_mixture_DP.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "beta_mixture_DP.stan")
data <- read.csv(filename)
data <- data[data$group == 1]
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
data
data <- data[data$group == 1]
data <- data[data$group == 1, ]
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
data
fit <- model$sample(
data = stan_data,
seed = 87031,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "beta_mixture_DP.stan")
data <- read.csv(filename)
data <- data[data$group == 1, ]
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "beta_mixture_DP.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 870310,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
model <- cmdstan_model(modelpath)
modelpath <- here::here("stan-models", "ordered_test.stan")
model <- cmdstan_model(modelpath)
library(mvtnorm)
?sample
set.seed(6341874)
mus <- rnorm(3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
groups <- sample(3, 200, replace = TRUE)
groups
