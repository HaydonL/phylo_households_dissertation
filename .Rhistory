x <- input[1]
y <- input[2]
dnorm(y, mean = x + 0.3, sd = 0.05)/g4_const
})
source(here::here("helper-functions/plot_normal.R"))
fit <- readRDS(here::here("data", "logit_sim_1_draws_ordered.rds"))
mixtures <- lapply(1:4, plot_normal, fit = fit, chain_no = 4,
draw_no = 4328, ages = x, K = 5, min_age = 0,
max_age = 1, plot = FALSE)
data <- unlist(list(densities, mixtures), recursive = FALSE)
str(data)
densities[[1]]
rep(1, n_points)
# Calculate densities
densitites[[1]] <- rep(1, n_points)
densities <- list()
# Calculate densities
densities[[1]] <- rep(1, n_points)
densities[[2]] <- apply(x_grid, 1, function(input){
x <- input[1]
y <- input[2]
dnorm(y, mean = x, sd = 0.1)/g2_const
})
densities[[3]] <- apply(x_grid, 1, function(input){
x <- input[1]
y <- input[2]
dnorm(y, mean = x, sd = 0.03)/g3_const
})
densities[[4]] <- apply(x_grid, 1, function(input){
x <- input[1]
y <- input[2]
dnorm(y, mean = x + 0.3, sd = 0.05)/g4_const
})
data <- unlist(list(densities, mixtures), recursive = FALSE)
str(data)
max_point <- max(unlist(data))
max_point
max(unlist(mixtures))
max(unlist(densities))
fit <- readRDS(here::here("data", "logit_sim_1_draws_ordered.rds"))
mixtures <- lapply(1:4, plot_normal, fit = fit, chain_no = 3,
draw_no = 3328, ages = x, K = 5, min_age = 0,
max_age = 1, plot = FALSE)
data <- unlist(list(densities, mixtures), recursive = FALSE)
max_point <- max(unlist(data))
max_point
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density))
p
mixtures[[1]]
x_grid
x_grid$density <- mixtures[[1]]
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density))
p
x_grid$density <- mixtures[[2]]
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density))
print(p)
x_grid$density <- mixtures[[3]]
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density))
print(p)
x_grid$density <- mixtures[[4]]
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density))
print(p)
source(here::here("helper-functions", "dbeta_bivariate.R"))
library(ggplot2)
library(gridExtra)
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0, 1, by = 0.005)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Params:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", beta_corr(mus, kappas, psi))) +
grid_theme()
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.9)
kappas <- c(10, 0.1)
psi <- 0.7
plot_beta(mus, kappas, psi)
psi_bounds(mus)
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 0.7
plot_beta(mus, kappas, psi)
psi_bounds(mus)
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 0
plot_beta(mus, kappas, psi)
plot_beta <- function(mus, kappas, psi){
x <- seq(0, 1, by = 0.005)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Params:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", beta_corr(mus, kappas, psi))) +
grid_theme() + scale_fill_continuous(trans = "log10", color = "viridis")
return(p)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 0
plot_beta(mus, kappas, psi)
?scale_fill_continuous
plot_beta <- function(mus, kappas, psi){
x <- seq(0, 1, by = 0.005)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Params:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", beta_corr(mus, kappas, psi))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
plot_beta(mus, kappas, psi)
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(1e-5 , 1 - 1e-5, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Params:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", beta_corr(mus, kappas, psi))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 0
plot_beta(mus, kappas, psi)
mus <- c(0.5, 0.5)
kappas <- c(5, 5)
psi <- 0
plot_beta(mus, kappas, psi)
1/200
1/2000
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Params:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", beta_corr(mus, kappas, psi))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(5, 5)
psi <- 0
plot_beta(mus, kappas, psi)
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
grid$density
max(grid$density)
plots <- list()
plot[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
psi_bounds(mus)
mus <- c(0.5, 0.5)
kappas <- c(5, 5)
psi <- 4
plot_beta(mus, kappas, psi)
?round
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
mus <- c(0.5, 0.5)
kappas <- c(5, 5)
psi <- 4
plot_beta(mus, kappas, psi)
mus <- c(0.5, 0.5)
kappas <- c(2, 2)
psi <- 4
plot_beta(mus, kappas, psi)
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(c(0.1, 0.5))
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.1, 0.5), kappas = c(5, 5), psi = 2)
grob <- do.call(arrangeGrob, plots)
grob
final_plot <- grid.arrange(grob, ncol = 1)
final_plot
ggsave("beta_visualisation.pdf", width = 8, height = 8)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", width = 9, height = 8)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
grid_theme <- function(){
theme(axis.title = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
grid_theme <- function(){
theme(axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
grid_theme <- function(){
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
}
plot_beta <- function(mus, kappas, psi){
x <- seq(0 , 1, length.out = 300)
grid <- expand.grid(x, x)
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
labs(title = paste("Parameters:", mus[1], mus[2], kappas[1], kappas[2], psi,
sep = ", "),
subtitle = paste0("Correlation: ", round(beta_corr(mus, kappas, psi), 3))) +
grid_theme() + scale_fill_continuous(trans = "log10", type = "viridis")
return(p)
}
psi_bounds <- function(mus){
bounds <- numeric(2)
min_array <- numeric(2)
max_array <- numeric(2)
min_array[1] <- mus[1] * mus[2]
min_array[2] <- (1 - mus[1])*(1 - mus[2])
max_array[1] <- mus[1] * (mus[2] - 1)
max_array[2] <- mus[2] * (mus[1] - 1)
bounds[1] <- -(1/max(min_array))
bounds[2] <- -(1/min(max_array))
return(bounds)
}
beta_corr <- function(mus, kappas, psi){
corr <- mus[1] * (1 - mus[1]) * mus[2] * (1 - mus[2])
corr <- corr * 1/(1 + kappas[1]) * 1/(1 + kappas[2])
corr <- psi * sqrt(corr)
return(corr)
}
mus <- c(0.5, 0.5)
kappas <- c(1, 1)
psi <- 4
plot_beta(mus, kappas, psi)
psi_bounds(mus)
plots <- list()
plots[[1]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 0)
plots[[2]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(1, 1), psi = 4)
plots[[3]] <- plot_beta(mus = c(0.5, 0.5), kappas = c(5, 5), psi = 0)
plots[[4]] <- plot_beta(mus = c(0.2, 0.8), kappas = c(5, 5),
psi = psi_bounds(c(0.2, 0.8))[1])
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
print(final_plot)
ggsave("beta_visualisation.pdf", final_plot, width = 9, height = 8)
pairs_tsi <- read.csv(here::here("data", "pairs_tsi_clean.csv"))
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
str(pairs_tsi)
summary(pairs_tsi)
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
source(here::here("helper-functions", "grid_theme.R"))
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
grid_theme() + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
plots <- list()
captions <- c("Female to male, out-of-household",
"Female to male, same household",
"Male to female, out-of-household",
"Male to female, same household")
for (group_no in 1:4){
group_data <- pairs_tsi[group == group_no]
p <- ggplot(group_data) +  geom_point(aes(x = AGE_TRANSMISSION.SOURCE,
y = AGE_INFECTION.RECIPIENT)) +
#geom_density_2d(aes(x = x, y = y)) +
theme(axis.title = element_blank()) + labs(caption = captions[group]) +
xlim(15, 50) + ylim(15, 50)
plots[[group_no]] <- p
}
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
final_plot <- grid.arrange(grob, ncol = 1)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
ggsave("pairs_scatter.pdf", final_plot, height = 7.2)
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered_SG.rds"))
fit$print(max_rows = 1000)
fit$diagnostic_summary()
fit <- readRDS(here::here("data", "logit_pairs_draws_1-2_SG.rds"))
fit$print(max_rows = 1000)
fit$diagnostic_summary()
