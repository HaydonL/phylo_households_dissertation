for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 2,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
mcmc_trace(fit$draws("ordered_mus"))
?mcmc_pairs
model <- cmdstan_model(modelpath)
set.seed(6341874)
mus <- matrix(rnorm(6), nrow = 3)
matrices <- list(matrix(c(1, 0.5, 0.5, 1), nrow = 2),
matrix(c(2, 0, 0, 2), nrow = 2),
matrix(c(5, -4, -4, 5), nrow = 2)
)
data <- matrix(nrow = 200, ncol = 2)
groups <- sample(2, 200, replace = TRUE, prob = c(0.6, 0.4))
for (index in 1:200){
group <- groups[index]
sample <- rmvnorm(1, mean = mus[group, ], matrices[[group]])
data[index, ] <- sample
}
stan_data <- list(
N = 200,
K = 2,
ages = data
)
fit <- model$sample(
data = stan_data,
seed = 25491,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP_ordered.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "sim_1.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_DP_ordered.stan")
data <- read.csv(filename)
stan_data <- list(
N = dim(data)[1],
N_group = 4,
ages = data[c("x", "y")],
group_nos = data$group,
min_age = 0,
max_age = 1,
K = 5
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 43821,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 5000
)
library(cmdstanr)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_pairs_draws.rds"))
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_pairs_draws.rds"))
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- load(here::here("data", "logit_sim_1_draws.rds"))
logit_sim_1_draws <- readRDS("C:/Users/haydo/OneDrive/Desktop/MSc Statistics/Summer Term/dissertation/data/logit_sim_1_draws.rds")
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
# Extract rates (eta)
eta_draws <- fit$draws(eta)
# Extract rates (eta)
eta_draws <- fit$draws("eta")
eta_draws
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_draws
str(eta_draws)
dim(eta_draws)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_draws[, 5] <- colSums(eta_draws)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- colSums(eta_draws)
eta_sums
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_sums
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
eta_prop
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
rowSums(eta_prop)
eta_prop
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
hist(eta_prop[, 1])
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
hist(eta_prop[, 1])
fit$data_file()
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_hist(eta_prop[, group])
print(p)
}
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_hist(eta_prop[, group])
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(eta_prop[, group])
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group]))
print(p)
}
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group])) +
labs(title = paste("Histogram of proportions - group", group),
x = "Proportion", y = "Frequency",
caption = "For four chains with 5,000 iterations each")
print(p)
}
eta_prop
as.matrix(eta_prop)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group])) +
labs(title = paste("Histogram of proportions - group", group),
x = "Proportion", y = "Frequency",
caption = "For four chains with 5,000 iterations each")
print(p)
}
summary(eta_prop)
source(here::here("helper-functions", "plot_normal.R"))
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
#plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
draw_no
chain_no
plot_normal(fit, chain_no, draw_no, 1, "a")
source(here::here("helper-functions", "plot_normal.R"))
set.seed(635261)
# Randomly choose draw and chain number
draw_no <- sample(5000, 1)
chain_no <- sample(4, 1)
for (group in 1:4){
plot_normal(fit, chain_no, draw_no, group, "not_in_use")
}
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
fit <- readRDS(here::here("data", "logit_sim_1_draws_ordered.rds"))
fit
print(fit, n = 100)
print(fit)
print(fit, max_rows = 100)
fit$draws("mus_1[1,2]")
fit$draws(c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]", "mus_1[1,4]", "mus_1[1,5]")
)
mu1g1 <- fit$draws(c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]", "mus_1[1,4]", "mus_1[1,5]"))
mcmc_trace(mu1g1)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
mcmc_trace(mu1g1)
mcmc_trace(mu1g1)
mu1g1
mcmc_trace(fit$draws("lp__"))
mcmc_trace(fit$draws("alpha"))
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
fit_ordered <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
fit_ordered <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
fit$summary()
fit_ordered <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
fit_ordered$summary()
fit_ordered$summary()
print(fit_ordered)
fit_ordered <- readRDS(here::here("data", "logit_sim_1_draws.rds"))
print(fit_ordered, max_rows = 200)
fit_ordered <- readRDS(here::here("data", "logit_sim_1_draws_ordered.rds"))
print(fit_ordered, max_rows = 200)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "pairs_tsi.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_SG_ordered.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
model <- cmdstan_model(modelpath)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
filename <- here::here("data", "pairs_tsi.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_SG_ordered.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
filename <- here::here("data", "pairs_tsi.csv")
modelpath <- here::here("stan-models", "logit_gaussian_mixture_SG_ordered.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 135184,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 4000
)
fit$save_object(here::here("data", "logit_pairs_draws_ordered_SG.rds"))
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 135184,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 4000
)
fit$output(1)
modelpath <- here::here("stan-models", "deprecated",
"logit_SG_IW.stan")
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 135184,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 4000
)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(data.table)
color_scheme_set("brightblue")
filename <- here::here("data", "pairs_tsi.csv")
modelpath <- here::here("stan-models", "deprecated",
"beta_mixture_SG_one_group.stan")
#modelpath <- here::here("stan-models", "logit_gaussian_mixture_SG_ordered.stan")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
pairs_tsi[, group := 1 + as.integer(2 * (SEX.SOURCE == "M") + same_hh)]
stan_data <- list(
N = pairs_tsi[, .N],
K = 5,
N_group = 4,
ages = as.matrix(pairs_tsi[, .(AGE_TRANSMISSION.SOURCE,
AGE_INFECTION.RECIPIENT)]),
group_nos = pairs_tsi[, .(group)][[1]],
min_age = 15,
max_age = 50
)
model <- cmdstan_model(modelpath)
fit <- model$sample(
data = stan_data,
seed = 135184,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 4000
)
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
fit_ordered <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
print(fit_ordered, max_rows = 200)
mcmc_trace(fit$ordered(c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]", "mus_1[1,4]",
"mus_1[1,5]",)))
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
fit <- readRDS(here::here("data", "logit_pairs_draws.rds"))
fit_ordered <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
print(fit_ordered, max_rows = 200)
mcmc_trace(fit$ordered(c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]", "mus_1[1,4]",
"mus_1[1,5]",)))
mcmc_trace(fit_ordered$draws((c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]",
"mus_1[1,4]","mus_1[1,5]",))))
mcmc_trace(fit_ordered$draws((c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]",
"mus_1[1,4]","mus_1[1,5]"))))
# Plot mu_1 for group 1
mcmc_trace(fit_ordered$draws((c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]",
"mus_1[1,4]","mus_1[1,5]"))))
# Plot alpha for group 1
mcmc_trace(fit_ordered$draws("alpha[1]"))
# Plot weights for group 1
mcmc_trace(fit_ordered$draws((c("weights[1,1]", "weights[1,2]", "weights[1,3]",
"weights[1,4]","weights[1,5]"))))
# Plot mu_1 for group 1
mcmc_trace(fit_ordered$draws((c("mus_1[1,1]", "mus_1[1,2]", "mus_1[1,3]",
"mus_1[1,4]","mus_1[1,5]"))))
# Plot alpha for group 1
mcmc_trace(fit_ordered$draws("alpha[1]"))
# Plot weights for group 1
mcmc_trace(fit_ordered$draws((c("weights[1,1]", "weights[1,2]", "weights[1,3]",
"weights[1,4]","weights[1,5]"))))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Plot histograms of proportions
for(group in 1:4){
p <- ggplot() + geom_histogram(aes(x = eta_prop[, group])) +
labs(title = paste("Histogram of proportions - group", group),
x = "Proportion", y = "Frequency",
caption = "For four chains with 5,000 iterations each")
print(p)
}
# Print out summary statistics
summary(eta_prop)
eta_prop
eta_HH_prop <- rowSums(eta_prop[, c(1,3)])
eta_HH_prop
eta_OOH_prop <- rowSums(eta_prop[, c(1,3)])
eta_OOH_prop <- rowSums(eta_prop[, c(1,3)])
summary(eta_OOH_prop)
eta_OOH_prop <- rowSums(eta_prop[, c(1,3)])
summary(eta_OOH_prop)
print(quantile(eta_OOH_prop, c(0.05, 0.95)))
eta_HH_prop <- rowSums(eta_prop[, c(2,4)])
summary(eta_HH_prop)
print(quantile(eta_HH_prop, c(0.05, 0.95))) # 90% CI
eta_HH_prop <- rowSums(eta_prop[, c(2,4)])
summary(eta_HH_prop)
print(quantile(eta_HH_prop, c(0.025, 0.975))) # 90% CI
