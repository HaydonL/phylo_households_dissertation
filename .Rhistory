}
# Final plot
full_density <- rep(0, length(grid))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
grid$density <- full_density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste("Final mixture", draw_no)) +
scale_fill_gradient(low = "white", high = "red")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 2)
ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
draw_indices <- seq(2000, 2500, by = 50)
for (draw_no in draw_indices){
draw <- draws[draw_no, 3,]
filename <- paste0("d", draw_no, "c3.pdf")
plot_density(draw, filename = filename, draw_no)
cat("Draw", draw_no, "done")
}
draw <- draws[2000, 3,]plot_density
draw <- draws[2000, 3,]
plot_density(draw, test, 2500)
plot_density(draw, "test.pdf", 2500)
plot_density <- function(params, filename, K = 5, draw_no = NA){
x <- seq(0, 1, by = 0.005)
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", 1:K, "]")
weights <- params[weight_names]
for (k in 1:K){
grid <- expand.grid(x, x)
mu_names <-  c(paste0("mus[", k, ",1]"), paste0("mus[", k, ",2]"))
kappa_names <- c(paste0("kappas[", k, ",1]"), paste0("kappas[", k, ",2]"))
mus <- params[mu_names]
kappas <- params[kappa_names]
psi <- params[paste0("psis[", k, "]")]
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
density_list[[k]] <- grid$density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red")
plots[[k]] <- p
}
# Final plot
full_density <- rep(0, length(grid))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
grid$density <- full_density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste("Final mixture", draw_no)) +
scale_fill_gradient(low = "white", high = "red")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 2)
ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
plot_density(draw, "test.pdf", draw_no = 2500)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(purrr)
library(tidyr)
source(here::here("helper-functions", "dbeta_bivariate.R"))
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
fit <- readRDS(here::here("data", "rline_1_draws.rds"))
draws <- rstan::extract(fit, c("weights", "mus", "kappas", "psis"),
permuted = FALSE)
plot_density <- function(params, filename, K = 5, draw_no = NA){
x <- seq(0, 1, by = 0.005)
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", 1:K, "]")
weights <- params[weight_names]
for (k in 1:K){
grid <- expand.grid(x, x)
mu_names <-  c(paste0("mus[", k, ",1]"), paste0("mus[", k, ",2]"))
kappa_names <- c(paste0("kappas[", k, ",1]"), paste0("kappas[", k, ",2]"))
mus <- params[mu_names]
kappas <- params[kappa_names]
psi <- params[paste0("psis[", k, "]")]
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
density_list[[k]] <- grid$density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red")
plots[[k]] <- p
}
# Final plot
full_density <- rep(0, length(grid))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
grid$density <- full_density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste("Final mixture", draw_no)) +
scale_fill_gradient(low = "white", high = "red")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 2)
ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
for (chain in 1:4){
draw <- draws[1, chain,]
filename <- paste0("d1c", chain, ".pdf")
plot_density(draw, filename = filename, draw_no = 1)
cat("Chain", chain, "done")
}
draw_indices <- seq(2000, 2500, by = 50)
for (draw_no in draw_indices){
draw <- draws[draw_no, 3,]
filename <- paste0("d", draw_no, "c3.pdf")
plot_density(draw, filename = filename, draw_no)
cat("Draw", draw_no, "done")
}
draw <- draws[2000, 3,]
plot_density(draw, filename = filename, draw_no = 2000)
print("Draw", draw_no, "done")
cat("Draw", draw_no, "done")
draw_indices <- seq(2000, 2500, by = 50)
draw_indices
for (draw_no in draw_indices){
draw <- draws[draw_no, 3,]
filename <- paste0("d", draw_no, "c3.pdf")
plot_density(draw, filename = filename, draw_no)
cat("Draw", draw_no, "done")
}
draw_no <- 2000
filename <- paste0("d", draw_no, "c3.pdf")
plot_density(draw, filename = filename, draw_no)
rm(list = ls())
library(ggplot2)
library(ggpubr)
library(dplyr)
library(purrr)
library(tidyr)
source(here::here("helper-functions", "dbeta_bivariate.R"))
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
fit <- readRDS(here::here("data", "rline_1_draws.rds"))
draws <- rstan::extract(fit, c("weights", "mus", "kappas", "psis"),
permuted = FALSE)
plot_density <- function(params, filename, K = 5, draw_no = NA){
x <- seq(0, 1, by = 0.005)
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", 1:K, "]")
weights <- params[weight_names]
for (k in 1:K){
grid <- expand.grid(x, x)
mu_names <-  c(paste0("mus[", k, ",1]"), paste0("mus[", k, ",2]"))
kappa_names <- c(paste0("kappas[", k, ",1]"), paste0("kappas[", k, ",2]"))
mus <- params[mu_names]
kappas <- params[kappa_names]
psi <- params[paste0("psis[", k, "]")]
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
density_list[[k]] <- grid$density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red")
plots[[k]] <- p
}
# Final plot
full_density <- rep(0, length(grid))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
grid$density <- full_density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste("Final mixture", draw_no)) +
scale_fill_gradient(low = "white", high = "red")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 2)
ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
draw_no <- 2050
filename <- paste0("d", draw_no, "c3.pdf")
draw_indices <- seq(2000, 2500, by = 50)
draw_indices
filename
draw
draw <- draws[2050, 3,]
draw
draw_indices <- seq(2000, 2500, by = 50)
for (draw_no in draw_indices){
draw <- draws[draw_no, 3,]
filename <- paste0("d", draw_no, "c3.pdf")
plot_density(draw, filename = filename, draw_no = draw_no)
cat("Draw", draw_no, "done")
}
fit <- readRDS(here::here("data", "rline_1_draws.rds"))
print(fit, "alpha")
traceplot(fit, "alpha")
library(rstan)
options(mc.cores = parallel::detectCores())
library(posterior)
library(bayesplot)
library(label.switching)
library(dplyr)
traceplot(fit, "alpha")
library(rstan)
options(mc.cores = parallel::detectCores())
library(posterior)
library(bayesplot)
library(label.switching)
library(dplyr)
filename <- here::here("data", "simulated", "rline_1.csv")
modelpath <- here::here("stan-models", "beta_count_2D.stan")
data <- read.csv(filename)
K <- 5 # number of clusters
stan_data <- list(
N = dim(data)[1],
K = K,
ages = data,
min_age = 0,
max_age = 1
)
modelpath <- here::here("stan-models", "beta_mixture_DP_one_group_flex_alpha.stan")
fit <- stan(file = modelpath, data = stan_data, iter = 5500,
warmup = 2500, seed = 846125, chains = 4)
traceplot(fit, "alpha")
traceplot(fit, c("weights", "mus"))
fit <- stan(file = modelpath, data = stan_data, iter = 23000,
warmup = 3000, seed = 846125, chains = 4)
fit <- readRDS(here::here("data", "rline_1_draws_flex.rds"))
#fit <- readRDS(here::here("data", "rline_1_draws.rds"))
print(fit, c("weights", "mus", "kappas", "psis", "pred_class", "lp__"))
traceplot(fit, c("weights", "mus"))
traceplot(fit, "alpha")
library(ggplot2)
library(ggpubr)
library(dplyr)
library(purrr)
library(tidyr)
source(here::here("helper-functions", "dbeta_bivariate.R"))
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
fit <- readRDS(here::here("data", "rline_1_draws_flex.rds"))
draws <- rstan::extract(fit, c("weights", "mus", "kappas", "psis"),
permuted = FALSE)
plot_density <- function(params, filename, K = 5, draw_no = NA){
x <- seq(0, 1, by = 0.005)
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", 1:K, "]")
weights <- params[weight_names]
for (k in 1:K){
grid <- expand.grid(x, x)
mu_names <-  c(paste0("mus[", k, ",1]"), paste0("mus[", k, ",2]"))
kappa_names <- c(paste0("kappas[", k, ",1]"), paste0("kappas[", k, ",2]"))
mus <- params[mu_names]
kappas <- params[kappa_names]
psi <- params[paste0("psis[", k, "]")]
grid$density <- apply(grid, 1, dbeta_bivariate, mus = mus, kappas = kappas,
psi = psi)
density_list[[k]] <- grid$density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red")
plots[[k]] <- p
}
# Final plot
full_density <- rep(0, length(grid))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
grid$density <- full_density
p <- ggplot(grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste("Final mixture", draw_no)) +
scale_fill_gradient(low = "white", high = "red")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 2)
ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
for (chain in 1:4){
draw <- draws[1, chain,]
filename <- paste0("d1c", chain, "flex.pdf")
plot_density(draw, filename = filename, draw_no = 1)
cat("Chain", chain, "done")
}
dim(draws)
draws
names(draws)
traceplot(fit, c("mus", "weights"))
traceplot(fit, c("mus", "weights", "psis"))
summary(fit, "alpha")
?stan
library(ggplot2)
library(ggpubr)
library(dplyr)
library(purrr)
library(tidyr)
source(here::here("helper-functions", "dbeta_bivariate.R"))
grid_theme <- function(){
theme(axis.text = element_blank(),
axis.title = element_blank())
}
fit <- readRDS(here::here("data", "rline_1_draws_flex.rds"))
dim(fit$draws())
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
filename <- here::here("data", "simulated", "rline_1.csv")
modelpath <- here::here("stan-models", "beta_count_2D.stan")
data <- read.csv(filename)
stan_data4 <- list(
N = dim(data)[1],
K = 3,
ages = data,
min_age = 0,
max_age = 1
)
modelpath6 <- here::here("stan-models", "beta_mixture_SG_one_group.stan")
model6 <- cmdstan_model(model6path)
model6 <- cmdstan_model(modelpath6)
model6 <- cmdstan_model(modelpath6)
model6 <- cmdstan_model(modelpath6)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 3000
)
model6 <- cmdstan_model(modelpath6)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 3000
)
model6 <- cmdstan_model(modelpath6)
model6 <- cmdstan_model(modelpath6)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 3000
)
?gamma
gamma(3)
gamma(4)
gamma(1.5)
SGb1_lpdf <- function(alpha, a, m){
a_m <- numeric(m)
s <- numeric(m - 1)
for (i in 1:m){
a_m[i] <- alpha + i - 1
}
for (j in 1:(m - 1)){
s[j] <- (-1)^(a + j) * j^(a - 2) * log(j) / (gamma(j) * gamma(m - j))
}
density <- (a - 1) * log(alpha) - prod(a_m) - log(sum(s))
return(density)
}
SGb1_lpdf(1, 1, 3)
SGb1_lpdf <- function(alpha, a, m){
a_m <- numeric(m)
s <- numeric(m - 1)
for (i in 1:m){
a_m[i] <- alpha + i - 1
}
for (j in 1:(m - 1)){
s[j] <- (-1)^(a + j) * j^(a - 2) * log(j) / (gamma(j) * gamma(m - j))
}
#density <- (a - 1) * log(alpha) - prod(a_m) - log(sum(s))
return(s)
}
SGb1_lpdf(1, 1, 3)
gamma(1)
gamma(20)
gamma(2)
log(2)
-0.5 * log(2)
log(1)
log(2)
model6 <- cmdstan_model(modelpath6)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 3000
)
mcmc_trace(fit6$draws("weights"))
stan_data4 <- list(
N = dim(data)[1],
K = 6,
ages = data,
min_age = 0,
max_age = 1
)
mcmc_trace(fit6$draws("alpha"))
mcmc_trace(fit6$draws("eta"))
mcmc_trace(fit6$draws("mus"))
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 1000,
iter_sampling = 3000
)
model6 <- cmdstan_model(modelpath6)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 3000,
iter_sampling = 20000
)
fit6 <- model6$sample(
data = stan_data4,
seed = 846125,
chains = 4,
parallel_chains = 4,
refresh = 500,
iter_warmup = 3000,
iter_sampling = 10000
)
mcmc_trace(fit6$draws("weights"))
mcmc_trace(fit6$draws("alpha"))
mcmc_trace(fit6$draws("eta"))
mcmc_trace(fit6$draws("mus"))
mcmc_trace(fit6$draws("weights"))
mcmc_trace(fit6$draws("lp__"))
mcmc_trace(fit6$draws("alpha"))
mcmc_hist(fit6$draws("alpha"))
#'
#' @param n - positive integer, number of 2D observations wanted
#' @param sd - positive real, noise around observation
#' @param offset - positive real, between 0 and 1
#'
#' @return a 2 by n matrix containing observations from the required
#' distribution
#' @export
#'
#' @examples
roffset <- function(n, sd, offset){
n_extra <- as.integer(1.5*n) # Initially generate more samples than needed
output_x <- c()
output_y <- c()
# Re-sample until we have enough valid observations
while(length(output_x) < n){
x <- runif(n_extra, 0, 1 - offset)
errors <- rnorm(n_extra, 0, sd)
y <- x + offset + errors
# Filter out observations where y not in (0,1)
in_bounds <- y > 0 & y < 1
x <- x[in_bounds]
y <- y[in_bounds]
# Append valid observations
output_x <- c(output_x, x)
output_y <- c(output_y, y)
}
# Pick out only the first n observations and return
output_x <- output_x[1:n]
output_y <- output_y[1:n]
return(matrix(c(output_x, output_y), ncol=2))
}
data <- roffset(200, 0.1, 0.3)
plot(data)
?plot
?xlim
plot.window(xlim = c(0, 1), ylim = c(0, 1))
plot(data)
plot.window(xlim = c(0, 1), ylim = c(0, 1))
plot(data)
plot(data, xlim = c(0, 1), ylim = c(0, 1))
data <- roffset(200, 0.01, 0.3)
plot(data, xlim = c(0, 1), ylim = c(0, 1))
# Process data
pairs_tsi <- load(here::here("data", "pairs_tsi.csv"))
# Process data
pairs_tsi <- read_csv(here::here("data", "pairs_tsi.csv"))
# Process data
pairs_tsi <- read.csv(here::here("data", "pairs_tsi.csv"))
pairs_tsi
