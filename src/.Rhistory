library(rstan)
options(mc.cores = parallel::detectCores())
library(posterior)
library(bayesplot)
library(label.switching)
library(dplyr)
filename <- here::here("data", "simulated", "rline_1.csv")
modelpath <- here::here("stan-models", "beta_count_2D.stan")
fit <- readRDS(here::here("data", "rline_1_draws.rds"))
print(fit, c("weights", "mus", "kappas", "psis", "pred_class", "lp__"))
pdf("5_cluster_traceplot.pdf")
traceplot(fit, "lp__")
traceplot(fit, "lp__")
dev.off()
traceplot(fit, "lp__")
pdf("5_cluster_traceplot.pdf")
traceplot(fit, c("weights", "mus"))
dev.off()
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
library(data.table)
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
#fit_beta <- readRDS(here::here("data", "beta_pairs_draws_ordered.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit_norm$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Check proportion of HH vs OOH
eta_HH_prop <- rowSums(eta_prop[, c(2,4)])
summary(eta_HH_prop)
print(quantile(eta_HH_prop, c(0.025, 0.975))) # 95% CI
# Load in packages and data
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
library(data.table)
# Load CmdStanR fits
fit_norm <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
#fit_beta <- readRDS(here::here("data", "beta_pairs_draws_ordered.rds"))
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit_norm$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Check proportion of HH vs OOH
eta_HH_prop <- rowSums(eta_prop[, c(2,4)])
summary(eta_HH_prop)
print(quantile(eta_HH_prop, c(0.025, 0.975))) # 95% CI
# Load in pairs data
filename <- here::here("data", "pairs_tsi.csv")
pairs_tsi <- read.csv(filename)
setDT(pairs_tsi)
# Check whether same household pairs are the same community
same_hh_pairs <- pairs_tsi[same_hh == 1]
source_comm <- same_hh_pairs[,.(COMM.SOURCE)]
recip_comm <- same_hh_pairs[,.(COMM.RECIPIENT)]
t(source_comm == recip_comm) # Observation 81 is false
# Load CmdStanR fit
fit_1_2 <- readRDS(here::here("data", "logit_pairs_draws_1-2.rds"))
print(fit_1_2, max_rows = 1000)
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit_1_2$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Check proportion of HH vs OOH for both fishing and inland
eta_HH_fishing <- eta_prop[, 1] / rowSums(eta_prop[, c(1, 4)])
eta_HH_inland <- eta_prop[, 2] / rowSums(eta_prop[, c(2, 5)])
print(quantile(eta_HH_fishing, c(0.025, 0.975))) # 95% CI
print(quantile(eta_HH_inland, c(0.025, 0.975))) # 95% CI
# Extract rates (eta)
eta_draws <- as_draws_matrix(fit_norm$draws("eta"))
eta_sums <- rowSums(eta_draws)
eta_prop <- eta_draws / eta_sums
# Check proportion of HH vs OOH for both MF and FM
eta_HH_MF <- eta_prop[, 4] / rowSums(eta_prop[, c(3, 4)])
eta_HH_FM <- eta_prop[, 2] / rowSums(eta_prop[, c(1, 2)])
print(quantile(eta_HH_MF, c(0.025, 0.975))) # 95% CI
print(quantile(eta_HH_FM, c(0.025, 0.975))) # 95% CI
#library(parallel)
#n_cores <- detectCores() - 1
source(here::here("helper-functions", "plot_normal.R"))
ages <- seq(15.5, 49.5, by = 1)
draws <- seq(100, 5000, by = 100)
grid <- expand.grid(ages, ages)
final_intensities <- list() # one entry per group
eta_draws <- as_draws_matrix(fit_norm$draws("eta"))
for (group in 1:4){
# Calculate densities for 50 iterations
intensities <- lapply(draws, plot_normal, fit = fit_norm, chain_no = 1,
group_no = group, ages = ages, plot = FALSE)
etas <- as.numeric(eta_draws[draws, group])
for (index in 1:length(etas)){
intensities[[index]] <- etas[index] * intensities[[index]]
}
# Calculate mean density
intensity_matrix <- matrix(unlist(intensities), nrow = 50, byrow = TRUE)
final_intensity <- apply(intensity_matrix, 2, mean)
final_intensities[[group]] <- final_intensity
}
# Extract relevant intensities and combine into one data.table
intensity_FM_OOH <- final_intensities[[1]]
intensity_FM_HH <- final_intensities[[2]]
recip_15_24_indices <- which(grid$Var2 < 24) # X: Source, Y: Recipient
yng_grid <- grid[recip_15_24_indices, ]
yng_grid$FM_OOH <- intensity_FM_OOH[recip_15_24_indices]
yng_grid$FM_HH <- intensity_FM_HH[recip_15_24_indices]
setDT(yng_grid)
# Calculate intensities among young people by age of source
yng_grid[, FM_OOH_sum := sum(FM_OOH), by = Var1]
yng_grid[, FM_HH_sum := sum(FM_HH), by = Var1]
# Drop unnecessary columns
#yng_grid[, c("FM_OOH", "FM_HH", "Var2") := NULL]
# Plot intensities
p <- ggplot(yng_grid, aes(x = Var1)) +
geom_line(aes(y = FM_OOH_sum, color = "Out-of-household")) +
geom_line(aes(y = FM_HH_sum, color = "Within household")) +
labs(x = "Age of source (Female)", y = "Relative intensity",
title = "FM transmission HH vs non-HH intensity",
caption = "Among young (16-24) recipients",
color = NULL)
p
# Extract relevant intensities and add to previous data.table
intensity_MF_OOH <- final_intensities[[3]]
intensity_MF_HH <- final_intensities[[4]]
yng_grid$MF_OOH <- intensity_MF_OOH[recip_15_24_indices]
yng_grid$MF_HH <- intensity_MF_HH[recip_15_24_indices]
# Calculate intensities among young people by age of source
yng_grid[, MF_OOH_sum := sum(MF_OOH), by = Var1]
yng_grid[, MF_HH_sum := sum(MF_HH), by = Var1]
# Drop unnecessary columns
#yng_grid[, c("MF_OOH", "MF_HH", "Var2") := NULL]
# Plot intensities
p <- ggplot(yng_grid, aes(x = Var1)) +
geom_line(aes(y = MF_OOH_sum, color = "Out-of-household")) +
geom_line(aes(y = MF_HH_sum, color = "Within household")) +
labs(x = "Age of source (Male)", y = "Relative intensity",
title = "MF transmission HH vs non-HH intensity",
caption = "Among young (16-24) recipients",
color = NULL)
p
fit_1_2$summary()
mcmc_trace(fit_1_2$draws("lp__"))
mcmc_trace(fit_1_2$draws("eta"))
mcmc_trace(fit_1_2$draws("alpha"))
mcmc_trace(fit_1_2$draws("mus_1"))
mcmc_trace(fit_1_2$draws("weights"))
mcmc_hist(fit_1_2$draws("weights[1,1]"))
mcmc_hist(fit_1_2$draws("weights[1,2]"))
mcmc_hist(fit_1_2$draws("weights[1,3]"))
mcmc_hist(fit_1_2$draws("weights[2,1]"))
mcmc_hist(fit_1_2$draws("weights[2,2]"))
mcmc_hist(fit_1_2$draws("weights[2,3]"))
mcmc_hist(fit_1_2$draws("weights[3,1]"))
mcmc_hist(fit_1_2$draws("weights[3,2]"))
mcmc_hist(fit_1_2$draws("weights[3,3]"))
mcmc_hist(fit_1_2$draws("weights[4,3]"))
mcmc_hist(fit_1_2$draws("weights[5,3]"))
mcmc_hist(fit_1_2$draws("weights[5,1]"))
mcmc_hist(fit_1_2$draws("weights[4,1]"))
mcmc_hist(fit_1_2$draws("weights[4,2]"))
mcmc_hist(fit_1_2$draws("weights[4,3]"))
mcmc_hist(fit_1_2$draws("weights[4,2]"))
mcmc_hist(fit_1_2$draws("weights[4,1]"))
mcmc_hist(fit_1_2$draws("weights[4,3]"))
source(here::here("helper-functions", "plot_normal.R"))
fit <- readRDS(here::here("data", "logit_mixture_DP_ordered.rds"))
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
?do.call
?arrangeGrob
?seq
library(gridExtra)
source(here::here("helper-functions", "plot_normal.R"))
source(here::here("helper-functions", "extract_data.R"))
source(here::here("helper-functions", "extract_legend.R"))
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
chain_no <- 1
draw_no <- 1
group_no <- 1
ages <- seq(15 + 1e5, 50 - 1e5, length.out = 300)
K <- 5
min_age <- 15
max_age <- 50
plot <- TRUE
params <- extract_data(fit, chain_no, draw_no)
# Set up grid of plot points
x <- ages
scaled_x <- (x - min_age) / (max_age - min_age) # linearly scaled ages
logit_x <- log(scaled_x / (1 - scaled_x)) # logit scaled ages
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weights <- as.numeric(params[weight_names])
for (k in 1:K){
x_grid <- expand.grid(x, x)
sx_grid <- expand.grid(scaled_x, scaled_x)
logit_grid <- expand.grid(logit_x, logit_x)
mu1_names <- paste0("mus_1[", group_no, ",", k, "]")
mu2_names <- paste0("mus_2[", group_no, ",", k, "]")
Sigma_ends <- c("1,1]", "1,2]", "2,1]", "2,2]")
Sigma_names <- c()
for (i in 1:4){
end <- Sigma_ends[i]
Sigma_names[i] <- paste0("Sigmas[", group_no, ",", k, ",", end)
}
mu_1 <- as.numeric(params[mu1_names])
mu_2 <- as.numeric(params[mu2_names])
mus <- c(mu_1, mu_2)
Sigmas <- as.numeric(params[Sigma_names])
Sigma <- matrix(Sigmas, nrow = 2, byrow = TRUE)
x_grid$density <- apply(logit_grid, 1, dmvnorm, mean = mus, sigma = Sigma)
x_grid$density <- x_grid$density / (sx_grid$Var1 * (1 - sx_grid$Var1) *
sx_grid$Var2 * (1 - sx_grid$Var2))
x_grid$density <- x_grid$density / (max_age - min_age)^2
density_list[[k]] <- x_grid$density
if (plot){
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "none")
plots[[k]] <- p
}
}
# Final plot
full_density <- rep(0, length(x_grid$density))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
x_grid$density <- full_density
if (plot){
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "none")
plots[[K + 1]] <- p
final_plot <- ggarrange(plotlist = plots, nrow = 3, ncol = 3,
common.legend = TRUE)
#ggsave(filename, final_plot, width = 7, height = 7)
print(final_plot)
}
plots[[1]]
x_grid
x
ages <- seq(15 + 1e-5, 50 - 1e-5, length.out = 300)
K <- 5
fit <- readRDS(here::here("data", "logit_pairs_draws_ordered.rds"))
chain_no <- 1
draw_no <- 1
group_no <- 1
ages <- seq(15 + 1e-5, 50 - 1e-5, length.out = 300)
K <- 5
min_age <- 15
max_age <- 50
plot <- TRUE
params <- extract_data(fit, chain_no, draw_no)
# Set up grid of plot points
x <- ages
scaled_x <- (x - min_age) / (max_age - min_age) # linearly scaled ages
logit_x <- log(scaled_x / (1 - scaled_x)) # logit scaled ages
density_list <- list()
plots <- list()
weight_names <- paste0("weights[", group_no, ",", 1:K, "]")
weights <- as.numeric(params[weight_names])
for (k in 1:K){
x_grid <- expand.grid(x, x)
sx_grid <- expand.grid(scaled_x, scaled_x)
logit_grid <- expand.grid(logit_x, logit_x)
mu1_names <- paste0("mus_1[", group_no, ",", k, "]")
mu2_names <- paste0("mus_2[", group_no, ",", k, "]")
Sigma_ends <- c("1,1]", "1,2]", "2,1]", "2,2]")
Sigma_names <- c()
for (i in 1:4){
end <- Sigma_ends[i]
Sigma_names[i] <- paste0("Sigmas[", group_no, ",", k, ",", end)
}
mu_1 <- as.numeric(params[mu1_names])
mu_2 <- as.numeric(params[mu2_names])
mus <- c(mu_1, mu_2)
Sigmas <- as.numeric(params[Sigma_names])
Sigma <- matrix(Sigmas, nrow = 2, byrow = TRUE)
x_grid$density <- apply(logit_grid, 1, dmvnorm, mean = mus, sigma = Sigma)
x_grid$density <- x_grid$density / (sx_grid$Var1 * (1 - sx_grid$Var1) *
sx_grid$Var2 * (1 - sx_grid$Var2))
x_grid$density <- x_grid$density / (max_age - min_age)^2
density_list[[k]] <- x_grid$density
if (plot){
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = paste0("Cluster ", k, " weight = ",
signif(weights[k]), 3)) +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "none")
plots[[k]] <- p
}
}
# Final plot
full_density <- rep(0, length(x_grid$density))
for (k in 1:K){
full_density <- full_density + weights[k] * density_list[[k]]
}
x_grid$density <- full_density
p <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "none")
plots[[K + 1]] <- p
plots[[1]]
plots[[2]]
str(plots)
ggp1_legend <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "right")
shared_legend <- extract_legend(ggp1_legend)
grid.arrange(arrangeGrob(plots[[1]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
grid.arrange(arrangeGrob(plots[[4]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
?legend.position
??legend.position
ggp1_legend <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "right")
shared_legend <- extract_legend(ggp1_legend)
grid.arrange(arrangeGrob(plots[[4]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
ggp1_legend <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "bottom")
shared_legend <- extract_legend(ggp1_legend)
grid.arrange(arrangeGrob(plots[[4]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
?theme
ggp1_legend <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "left")
shared_legend <- extract_legend(ggp1_legend)
grid.arrange(arrangeGrob(plots[[4]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
?grid.arrange
plots$ncol <- 2
plots[[1]]
grob <- do.call(arrangeGrob, plots)
grid.arrange(grob, shared_legend, ncol = 3, heights = c(10, 1))
ggp1_legend <- ggplot(x_grid) + geom_tile(aes(x = Var1, y = Var2, fill = density)) +
grid_theme() + labs(title = "Final mixture") +
scale_fill_gradient(low = "white", high = "red") +
theme(legend.position = "right")
shared_legend <- extract_legend(ggp1_legend)
grid.arrange(arrangeGrob(plots[[4]], plots[[6]], ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
grid.arrange(grob, shared_legend, ncol = 3, heights = c(10, 1))
ggsave("mixture.pdf")
getwd()
plots$ncol <- 2
grob <- do.call(arrangeGrob, plots)
p <- grid.arrange(grob, shared_legend, ncol = 3, heights = c(10, 1))
print(p)
ggsave("mixture.pdf")
ggsave("mixture.pdf")
p
print(p)
?ggsave
ggsave("mixture.pdf", p)
ggsave("p3.pdf", plots[[3]])
ggsave("p3.pdf", plots[[3]] + theme(legend.position = "right"))
ggsave("p2.pdf", plots[[2]] + theme(legend.position = "right"))
library(tidyverse)
data <- list(
sheet1 = data.frame(
category = c(paste0("rep_", 1:10)),
value1 = rnorm(10),
value2 = rnorm(10)),
sheet2 = data.frame(
category = c(paste0("rep_", 1:10)),
value1 = rnorm(10),
value2 = rnorm(10)),
sheet3 = data.frame(
category = c(paste0("rep_", 1:10)),
value1 = rnorm(10),
value2 = rnorm(10)))
data <- bind_rows(data, .id = "id") %>%
pivot_longer(c(-id, -category))
ggplot(data, aes(x= category, y=name)) +
geom_tile(aes(fill = value)) +
facet_wrap(~id) +
ggtitle("One title for all")+
theme(plot.title = element_text(hjust = 0.5))
name <- "a"
storage$name <- 1
name <- "a"
storage = list()
storage$name <- 1
storage
name <- "a"
storage = list()
storage$'name' <- 1
storage
?append
name <- "a"
storage = list()
storage[[name]] <- 1
storage
